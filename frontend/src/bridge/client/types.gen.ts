// This file is auto-generated by @hey-api/openapi-ts

export type AdminLoginRequest = {
    email: string;
    password: string;
};

export type AdminLoginResponse = {
    admin_id: string;
    email: string;
    token: string;
};

export type AuditLogResponse = {
    error_message?: string | null;
    id: string;
    ip_address?: string | null;
    method: string;
    path: string;
    request_body?: string | null;
    response_body?: string | null;
    response_time_ms?: number | null;
    status_code?: number | null;
    timestamp?: string | null;
    user_agent?: string | null;
    user_id?: string | null;
};

export type AuthUser = {
    user_id: string;
};

/**
 * Create role request
 */
export type CreateRoleRequest = {
    description?: string | null;
    name: string;
    permissions: Array<string>;
};

export type CreateUserRequest = {
    email: string;
    is_admin?: boolean | null;
    password: string;
    role_id?: number | null;
};

export type DatabasePerformanceResponse = {
    avg_execution_time_ms: number;
    critical_query_count: number;
    error_rate: number;
    max_execution_time_ms: number;
    p50_execution_time_ms: number;
    p95_execution_time_ms: number;
    p99_execution_time_ms: number;
    queries_per_second: number;
    slow_query_count: number;
    total_queries: number;
};

export type DatabaseTableResponse = {
    name: string;
    record_count: number;
};

export type ErrorResponse = {
    /**
     * Error message describing what went wrong
     */
    message: string;
};

export type HealthResponse = {
    active_users_7_days: number;
    cpu_count: number;
    cpu_usage: number;
    database_connections?: number | null;
    database_performance?: null | DatabasePerformanceResponse;
    database_status: string;
    disk_available: string;
    disk_total: string;
    disk_usage: number;
    disk_used: string;
    environment: string;
    host_name?: string | null;
    kernel_version?: string | null;
    memory_available: string;
    memory_total: string;
    memory_usage: number;
    memory_used: string;
    network_bytes_received: string;
    network_bytes_sent: string;
    new_users_24_hours: number;
    new_users_30_days: number;
    new_users_7_days: number;
    os_version?: string | null;
    process_count: number;
    project_name: string;
    project_version: string;
    server_host: string;
    server_port: number;
    server_protocol: string;
    status: string;
    system_name?: string | null;
    temperature?: number | null;
    timestamp: string;
    total_users: number;
    uptime: string;
};

export type LoginRequest = {
    email: string;
    password: string;
};

export type LoginResponse = {
    token: string;
};

export type LogsQueryParams = {
    end_date?: string | null;
    limit?: number;
    method?: string | null;
    page?: number;
    start_date?: string | null;
    status_code?: number | null;
    user_id?: string | null;
};

export type MessageResponse = {
    /**
     * Response message
     */
    message: string;
};

export type PaginatedResponseAuditLogResponse = {
    data: Array<{
        error_message?: string | null;
        id: string;
        ip_address?: string | null;
        method: string;
        path: string;
        request_body?: string | null;
        response_body?: string | null;
        response_time_ms?: number | null;
        status_code?: number | null;
        timestamp?: string | null;
        user_agent?: string | null;
        user_id?: string | null;
    }>;
    pagination: PaginationMeta;
};

export type PaginatedResponseRoleResponse = {
    data: Array<{
        created_at?: string | null;
        description?: string | null;
        id: number;
        name: string;
        permissions: Array<string>;
        updated_at?: string | null;
    }>;
    pagination: PaginationMeta;
};

export type PaginatedResponseUserResponse = {
    data: Array<{
        created_at?: string | null;
        email: string;
        id: string;
        is_admin?: boolean | null;
        role_id?: number | null;
        role_name?: string | null;
    }>;
    pagination: PaginationMeta;
};

export type PaginationMeta = {
    limit: number;
    page: number;
    total: number;
    total_pages: number;
};

/**
 * Permission check request
 */
export type PermissionCheckRequest = {
    permission: string;
    user_id: string;
};

/**
 * Permission check response
 */
export type PermissionCheckResponse = {
    has_permission: boolean;
    required_permission: string;
    user_role?: string | null;
};

export type ProfileResponse = {
    created_at?: string | null;
    email: string;
    id: string;
};

export type RegisterRequest = {
    /**
     * User's email address
     */
    email: string;
    /**
     * User's password
     */
    password: string;
};

export type RegisterResponse = {
    /**
     * Timestamp when the user was created (ISO 8601 format)
     */
    createdAt?: string | null;
    /**
     * User's email address
     */
    email: string;
    /**
     * Success message
     */
    message: string;
    /**
     * The newly created user's ID
     */
    userId: string;
};

/**
 * Role response
 */
export type RoleResponse = {
    created_at?: string | null;
    description?: string | null;
    id: number;
    name: string;
    permissions: Array<string>;
    updated_at?: string | null;
};

export type TableRecordResponse = {
    columns: Array<string>;
    records: Array<Array<unknown>>;
};

export type TableRecordsQueryParams = {
    limit?: number;
    page?: number;
};

/**
 * Update role request
 */
export type UpdateRoleRequest = {
    description?: string | null;
    name?: string | null;
    permissions?: Array<string> | null;
};

export type UpdateUserRequest = {
    email?: string | null;
    is_admin?: boolean | null;
    password?: string | null;
    role_id?: number | null;
};

export type UserResponse = {
    created_at?: string | null;
    email: string;
    id: string;
    is_admin?: boolean | null;
    role_id?: number | null;
    role_name?: string | null;
};

export type UsersQueryParams = {
    is_admin?: boolean | null;
    limit?: number;
    page?: number;
    search?: string | null;
};

export type GetDatabaseTablesHandlerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/admin/database/tables';
};

export type GetDatabaseTablesHandlerErrors = {
    /**
     * Unauthorized - authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - admin privileges required
     */
    403: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetDatabaseTablesHandlerError = GetDatabaseTablesHandlerErrors[keyof GetDatabaseTablesHandlerErrors];

export type GetDatabaseTablesHandlerResponses = {
    /**
     * Database tables retrieved successfully
     */
    200: Array<DatabaseTableResponse>;
};

export type GetDatabaseTablesHandlerResponse = GetDatabaseTablesHandlerResponses[keyof GetDatabaseTablesHandlerResponses];

export type GetTableRecordsHandlerData = {
    body?: never;
    path: {
        /**
         * Table name
         */
        table_name: string;
    };
    query?: {
        page?: number;
        limit?: number;
    };
    url: '/api/v1/admin/database/tables/{table_name}';
};

export type GetTableRecordsHandlerErrors = {
    /**
     * Unauthorized - authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - admin privileges required
     */
    403: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetTableRecordsHandlerError = GetTableRecordsHandlerErrors[keyof GetTableRecordsHandlerErrors];

export type GetTableRecordsHandlerResponses = {
    /**
     * Table records retrieved successfully
     */
    200: TableRecordResponse;
};

export type GetTableRecordsHandlerResponse = GetTableRecordsHandlerResponses[keyof GetTableRecordsHandlerResponses];

export type HealthHandlerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/admin/health';
};

export type HealthHandlerErrors = {
    /**
     * Unauthorized - authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - admin privileges required
     */
    403: ErrorResponse;
};

export type HealthHandlerError = HealthHandlerErrors[keyof HealthHandlerErrors];

export type HealthHandlerResponses = {
    /**
     * System health check successful
     */
    200: HealthResponse;
};

export type HealthHandlerResponse = HealthHandlerResponses[keyof HealthHandlerResponses];

export type AdminLoginHandlerData = {
    body: AdminLoginRequest;
    path?: never;
    query?: never;
    url: '/api/v1/admin/login';
};

export type AdminLoginHandlerErrors = {
    /**
     * Bad request - validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - invalid credentials
     */
    401: ErrorResponse;
    /**
     * Forbidden - admin privileges required
     */
    403: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type AdminLoginHandlerError = AdminLoginHandlerErrors[keyof AdminLoginHandlerErrors];

export type AdminLoginHandlerResponses = {
    /**
     * Admin login successful
     */
    200: AdminLoginResponse;
};

export type AdminLoginHandlerResponse = AdminLoginHandlerResponses[keyof AdminLoginHandlerResponses];

export type AdminLogoutHandlerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/admin/logout';
};

export type AdminLogoutHandlerResponses = {
    /**
     * Admin logout successful
     */
    200: MessageResponse;
};

export type AdminLogoutHandlerResponse = AdminLogoutHandlerResponses[keyof AdminLogoutHandlerResponses];

export type GetAuditLogsHandlerData = {
    body?: never;
    path?: never;
    query?: {
        page?: number;
        limit?: number;
        method?: string | null;
        status_code?: number | null;
        user_id?: string | null;
        start_date?: string | null;
        end_date?: string | null;
    };
    url: '/api/v1/admin/logs';
};

export type GetAuditLogsHandlerErrors = {
    /**
     * Unauthorized - authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - admin privileges required
     */
    403: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetAuditLogsHandlerError = GetAuditLogsHandlerErrors[keyof GetAuditLogsHandlerErrors];

export type GetAuditLogsHandlerResponses = {
    /**
     * Audit logs retrieved successfully
     */
    200: PaginatedResponseAuditLogResponse;
};

export type GetAuditLogsHandlerResponse = GetAuditLogsHandlerResponses[keyof GetAuditLogsHandlerResponses];

export type CheckPermissionHandlerData = {
    body: PermissionCheckRequest;
    path?: never;
    query?: never;
    url: '/api/v1/admin/permissions/check';
};

export type CheckPermissionHandlerErrors = {
    /**
     * Bad request - validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - admin privileges required
     */
    403: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type CheckPermissionHandlerError = CheckPermissionHandlerErrors[keyof CheckPermissionHandlerErrors];

export type CheckPermissionHandlerResponses = {
    /**
     * Permission check completed
     */
    200: PermissionCheckResponse;
};

export type CheckPermissionHandlerResponse = CheckPermissionHandlerResponses[keyof CheckPermissionHandlerResponses];

export type GetRolesHandlerData = {
    body?: never;
    path?: never;
    query: {
        page: number;
        limit: number;
        search?: string | null;
    };
    url: '/api/v1/admin/roles';
};

export type GetRolesHandlerErrors = {
    /**
     * Unauthorized - authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - admin privileges required
     */
    403: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetRolesHandlerError = GetRolesHandlerErrors[keyof GetRolesHandlerErrors];

export type GetRolesHandlerResponses = {
    /**
     * Roles retrieved successfully
     */
    200: PaginatedResponseRoleResponse;
};

export type GetRolesHandlerResponse = GetRolesHandlerResponses[keyof GetRolesHandlerResponses];

export type CreateRoleHandlerData = {
    body: CreateRoleRequest;
    path?: never;
    query?: never;
    url: '/api/v1/admin/roles';
};

export type CreateRoleHandlerErrors = {
    /**
     * Bad request - validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - admin privileges required
     */
    403: ErrorResponse;
    /**
     * Conflict - role name already exists
     */
    409: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type CreateRoleHandlerError = CreateRoleHandlerErrors[keyof CreateRoleHandlerErrors];

export type CreateRoleHandlerResponses = {
    /**
     * Role created successfully
     */
    201: RoleResponse;
};

export type CreateRoleHandlerResponse = CreateRoleHandlerResponses[keyof CreateRoleHandlerResponses];

export type DeleteRoleHandlerData = {
    body?: never;
    path: {
        /**
         * Role ID
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/admin/roles/{id}';
};

export type DeleteRoleHandlerErrors = {
    /**
     * Unauthorized - authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - admin privileges required
     */
    403: ErrorResponse;
    /**
     * Role not found
     */
    404: ErrorResponse;
    /**
     * Conflict - role is in use by users
     */
    409: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type DeleteRoleHandlerError = DeleteRoleHandlerErrors[keyof DeleteRoleHandlerErrors];

export type DeleteRoleHandlerResponses = {
    /**
     * Role deleted successfully
     */
    200: MessageResponse;
};

export type DeleteRoleHandlerResponse = DeleteRoleHandlerResponses[keyof DeleteRoleHandlerResponses];

export type GetRoleHandlerData = {
    body?: never;
    path: {
        /**
         * Role ID
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/admin/roles/{id}';
};

export type GetRoleHandlerErrors = {
    /**
     * Unauthorized - authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - admin privileges required
     */
    403: ErrorResponse;
    /**
     * Role not found
     */
    404: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetRoleHandlerError = GetRoleHandlerErrors[keyof GetRoleHandlerErrors];

export type GetRoleHandlerResponses = {
    /**
     * Role retrieved successfully
     */
    200: RoleResponse;
};

export type GetRoleHandlerResponse = GetRoleHandlerResponses[keyof GetRoleHandlerResponses];

export type UpdateRoleHandlerData = {
    body: UpdateRoleRequest;
    path: {
        /**
         * Role ID
         */
        id: number;
    };
    query?: never;
    url: '/api/v1/admin/roles/{id}';
};

export type UpdateRoleHandlerErrors = {
    /**
     * Bad request - validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - admin privileges required
     */
    403: ErrorResponse;
    /**
     * Role not found
     */
    404: ErrorResponse;
    /**
     * Conflict - role name already exists
     */
    409: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type UpdateRoleHandlerError = UpdateRoleHandlerErrors[keyof UpdateRoleHandlerErrors];

export type UpdateRoleHandlerResponses = {
    /**
     * Role updated successfully
     */
    200: RoleResponse;
};

export type UpdateRoleHandlerResponse = UpdateRoleHandlerResponses[keyof UpdateRoleHandlerResponses];

export type GetUsersHandlerData = {
    body?: never;
    path?: never;
    query?: {
        page?: number;
        limit?: number;
        search?: string | null;
        is_admin?: boolean | null;
    };
    url: '/api/v1/admin/users';
};

export type GetUsersHandlerErrors = {
    /**
     * Unauthorized - authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - admin privileges required
     */
    403: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetUsersHandlerError = GetUsersHandlerErrors[keyof GetUsersHandlerErrors];

export type GetUsersHandlerResponses = {
    /**
     * Users retrieved successfully
     */
    200: PaginatedResponseUserResponse;
};

export type GetUsersHandlerResponse = GetUsersHandlerResponses[keyof GetUsersHandlerResponses];

export type CreateUserHandlerData = {
    body: CreateUserRequest;
    path?: never;
    query?: never;
    url: '/api/v1/admin/users';
};

export type CreateUserHandlerErrors = {
    /**
     * Bad request - validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - admin privileges required
     */
    403: ErrorResponse;
    /**
     * Conflict - user already exists
     */
    409: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type CreateUserHandlerError = CreateUserHandlerErrors[keyof CreateUserHandlerErrors];

export type CreateUserHandlerResponses = {
    /**
     * User created successfully
     */
    201: UserResponse;
};

export type CreateUserHandlerResponse = CreateUserHandlerResponses[keyof CreateUserHandlerResponses];

export type DeleteUserHandlerData = {
    body?: never;
    path: {
        /**
         * User ID
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/admin/users/{id}';
};

export type DeleteUserHandlerErrors = {
    /**
     * Bad request - cannot delete own account
     */
    400: ErrorResponse;
    /**
     * Unauthorized - authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - admin privileges required
     */
    403: ErrorResponse;
    /**
     * User not found
     */
    404: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type DeleteUserHandlerError = DeleteUserHandlerErrors[keyof DeleteUserHandlerErrors];

export type DeleteUserHandlerResponses = {
    /**
     * User deleted successfully
     */
    200: MessageResponse;
};

export type DeleteUserHandlerResponse = DeleteUserHandlerResponses[keyof DeleteUserHandlerResponses];

export type GetUserHandlerData = {
    body?: never;
    path: {
        /**
         * User ID
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/admin/users/{id}';
};

export type GetUserHandlerErrors = {
    /**
     * Unauthorized - authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - admin privileges required
     */
    403: ErrorResponse;
    /**
     * User not found
     */
    404: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type GetUserHandlerError = GetUserHandlerErrors[keyof GetUserHandlerErrors];

export type GetUserHandlerResponses = {
    /**
     * User retrieved successfully
     */
    200: UserResponse;
};

export type GetUserHandlerResponse = GetUserHandlerResponses[keyof GetUserHandlerResponses];

export type UpdateUserHandlerData = {
    body: UpdateUserRequest;
    path: {
        /**
         * User ID
         */
        id: string;
    };
    query?: never;
    url: '/api/v1/admin/users/{id}';
};

export type UpdateUserHandlerErrors = {
    /**
     * Bad request - validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - authentication required
     */
    401: ErrorResponse;
    /**
     * Forbidden - admin privileges required
     */
    403: ErrorResponse;
    /**
     * User not found
     */
    404: ErrorResponse;
    /**
     * Conflict - email already taken
     */
    409: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type UpdateUserHandlerError = UpdateUserHandlerErrors[keyof UpdateUserHandlerErrors];

export type UpdateUserHandlerResponses = {
    /**
     * User updated successfully
     */
    200: UserResponse;
};

export type UpdateUserHandlerResponse = UpdateUserHandlerResponses[keyof UpdateUserHandlerResponses];

export type LoginHandlerData = {
    body: LoginRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/login';
};

export type LoginHandlerErrors = {
    /**
     * Bad request - validation errors
     */
    400: ErrorResponse;
    /**
     * Unauthorized - invalid credentials
     */
    401: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type LoginHandlerError = LoginHandlerErrors[keyof LoginHandlerErrors];

export type LoginHandlerResponses = {
    /**
     * Login successful
     */
    200: LoginResponse;
};

export type LoginHandlerResponse = LoginHandlerResponses[keyof LoginHandlerResponses];

export type LogoutHandlerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/logout';
};

export type LogoutHandlerResponses = {
    /**
     * Logout successful
     */
    200: MessageResponse;
};

export type LogoutHandlerResponse = LogoutHandlerResponses[keyof LogoutHandlerResponses];

export type ProfileHandlerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/v1/auth/profile';
};

export type ProfileHandlerErrors = {
    /**
     * Unauthorized - authentication required
     */
    401: ErrorResponse;
    /**
     * Not found - user not found
     */
    404: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type ProfileHandlerError = ProfileHandlerErrors[keyof ProfileHandlerErrors];

export type ProfileHandlerResponses = {
    /**
     * Profile retrieved successfully
     */
    200: ProfileResponse;
};

export type ProfileHandlerResponse = ProfileHandlerResponses[keyof ProfileHandlerResponses];

export type RegisterHandlerData = {
    body: RegisterRequest;
    path?: never;
    query?: never;
    url: '/api/v1/auth/register';
};

export type RegisterHandlerErrors = {
    /**
     * Bad request - validation errors
     */
    400: ErrorResponse;
    /**
     * Conflict - user already exists
     */
    409: ErrorResponse;
    /**
     * Internal server error
     */
    500: ErrorResponse;
};

export type RegisterHandlerError = RegisterHandlerErrors[keyof RegisterHandlerErrors];

export type RegisterHandlerResponses = {
    /**
     * User created successfully
     */
    201: RegisterResponse;
};

export type RegisterHandlerResponse = RegisterHandlerResponses[keyof RegisterHandlerResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:3000' | (string & {});
};