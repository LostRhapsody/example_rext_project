// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetDatabaseTablesHandlerData, GetDatabaseTablesHandlerResponses, GetDatabaseTablesHandlerErrors, GetTableRecordsHandlerData, GetTableRecordsHandlerResponses, GetTableRecordsHandlerErrors, HealthHandlerData, HealthHandlerResponses, HealthHandlerErrors, AdminLoginHandlerData, AdminLoginHandlerResponses, AdminLoginHandlerErrors, AdminLogoutHandlerData, AdminLogoutHandlerResponses, GetAuditLogsHandlerData, GetAuditLogsHandlerResponses, GetAuditLogsHandlerErrors, GetUsersHandlerData, GetUsersHandlerResponses, GetUsersHandlerErrors, CreateUserHandlerData, CreateUserHandlerResponses, CreateUserHandlerErrors, DeleteUserHandlerData, DeleteUserHandlerResponses, DeleteUserHandlerErrors, GetUserHandlerData, GetUserHandlerResponses, GetUserHandlerErrors, UpdateUserHandlerData, UpdateUserHandlerResponses, UpdateUserHandlerErrors, LoginHandlerData, LoginHandlerResponses, LoginHandlerErrors, LogoutHandlerData, LogoutHandlerResponses, ProfileHandlerData, ProfileHandlerResponses, ProfileHandlerErrors, RegisterHandlerData, RegisterHandlerResponses, RegisterHandlerErrors } from './types.gen';
import { zGetDatabaseTablesHandlerData, zGetDatabaseTablesHandlerResponse, zGetTableRecordsHandlerData, zGetTableRecordsHandlerResponse, zHealthHandlerData, zHealthHandlerResponse, zAdminLoginHandlerData, zAdminLoginHandlerResponse, zAdminLogoutHandlerData, zAdminLogoutHandlerResponse, zGetAuditLogsHandlerData, zGetAuditLogsHandlerResponse, zGetUsersHandlerData, zGetUsersHandlerResponse, zCreateUserHandlerData, zCreateUserHandlerResponse, zDeleteUserHandlerData, zDeleteUserHandlerResponse, zGetUserHandlerData, zGetUserHandlerResponse, zUpdateUserHandlerData, zUpdateUserHandlerResponse, zLoginHandlerData, zLoginHandlerResponse, zLogoutHandlerData, zLogoutHandlerResponse, zProfileHandlerData, zProfileHandlerResponse, zRegisterHandlerData, zRegisterHandlerResponse } from './zod.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get database tables
 * Retrieves a list of all database tables with record counts
 */
export const getDatabaseTablesHandler = <ThrowOnError extends boolean = false>(options?: Options<GetDatabaseTablesHandlerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetDatabaseTablesHandlerResponses, GetDatabaseTablesHandlerErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetDatabaseTablesHandlerData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetDatabaseTablesHandlerResponse.parseAsync(data);
        },
        url: '/api/v1/admin/admin/database/tables',
        ...options
    });
};

/**
 * Get table records
 * Retrieves paginated records from a specific database table
 */
export const getTableRecordsHandler = <ThrowOnError extends boolean = false>(options: Options<GetTableRecordsHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTableRecordsHandlerResponses, GetTableRecordsHandlerErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetTableRecordsHandlerData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetTableRecordsHandlerResponse.parseAsync(data);
        },
        url: '/api/v1/admin/admin/database/tables/{table_name}',
        ...options
    });
};

/**
 * System health check
 * Returns system health status
 */
export const healthHandler = <ThrowOnError extends boolean = false>(options?: Options<HealthHandlerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<HealthHandlerResponses, HealthHandlerErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zHealthHandlerData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zHealthHandlerResponse.parseAsync(data);
        },
        url: '/api/v1/admin/admin/health',
        ...options
    });
};

/**
 * Admin login
 * Authenticates an admin user and returns a JWT token
 */
export const adminLoginHandler = <ThrowOnError extends boolean = false>(options: Options<AdminLoginHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AdminLoginHandlerResponses, AdminLoginHandlerErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zAdminLoginHandlerData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zAdminLoginHandlerResponse.parseAsync(data);
        },
        url: '/api/v1/admin/admin/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Admin logout
 * Logs out the current admin user
 */
export const adminLogoutHandler = <ThrowOnError extends boolean = false>(options?: Options<AdminLogoutHandlerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AdminLogoutHandlerResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zAdminLogoutHandlerData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zAdminLogoutHandlerResponse.parseAsync(data);
        },
        url: '/api/v1/admin/admin/logout',
        ...options
    });
};

/**
 * Get audit logs
 * Retrieves paginated audit logs with optional filtering
 */
export const getAuditLogsHandler = <ThrowOnError extends boolean = false>(options?: Options<GetAuditLogsHandlerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAuditLogsHandlerResponses, GetAuditLogsHandlerErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetAuditLogsHandlerData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetAuditLogsHandlerResponse.parseAsync(data);
        },
        url: '/api/v1/admin/admin/logs',
        ...options
    });
};

/**
 * Get users
 * Retrieves paginated users with optional filtering
 */
export const getUsersHandler = <ThrowOnError extends boolean = false>(options?: Options<GetUsersHandlerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersHandlerResponses, GetUsersHandlerErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetUsersHandlerData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetUsersHandlerResponse.parseAsync(data);
        },
        url: '/api/v1/admin/admin/users',
        ...options
    });
};

/**
 * Create user
 * Creates a new user account
 */
export const createUserHandler = <ThrowOnError extends boolean = false>(options: Options<CreateUserHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserHandlerResponses, CreateUserHandlerErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zCreateUserHandlerData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zCreateUserHandlerResponse.parseAsync(data);
        },
        url: '/api/v1/admin/admin/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete user
 * Deletes a user account
 */
export const deleteUserHandler = <ThrowOnError extends boolean = false>(options: Options<DeleteUserHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserHandlerResponses, DeleteUserHandlerErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zDeleteUserHandlerData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zDeleteUserHandlerResponse.parseAsync(data);
        },
        url: '/api/v1/admin/admin/users/{id}',
        ...options
    });
};

/**
 * Get user
 * Retrieves a specific user by ID
 */
export const getUserHandler = <ThrowOnError extends boolean = false>(options: Options<GetUserHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserHandlerResponses, GetUserHandlerErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zGetUserHandlerData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zGetUserHandlerResponse.parseAsync(data);
        },
        url: '/api/v1/admin/admin/users/{id}',
        ...options
    });
};

/**
 * Update user
 * Updates an existing user account
 */
export const updateUserHandler = <ThrowOnError extends boolean = false>(options: Options<UpdateUserHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserHandlerResponses, UpdateUserHandlerErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zUpdateUserHandlerData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zUpdateUserHandlerResponse.parseAsync(data);
        },
        url: '/api/v1/admin/admin/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login user
 * Authenticates a user with email and password, returns a JWT token on success.
 */
export const loginHandler = <ThrowOnError extends boolean = false>(options: Options<LoginHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginHandlerResponses, LoginHandlerErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zLoginHandlerData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zLoginHandlerResponse.parseAsync(data);
        },
        url: '/api/v1/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout user
 * Logs out the current user. Since JWT is stateless, this just returns a success message.
 */
export const logoutHandler = <ThrowOnError extends boolean = false>(options?: Options<LogoutHandlerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutHandlerResponses, unknown, ThrowOnError>({
        requestValidator: async (data) => {
            return await zLogoutHandlerData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zLogoutHandlerResponse.parseAsync(data);
        },
        url: '/api/v1/auth/logout',
        ...options
    });
};

/**
 * Get user profile
 * Retrieves the authenticated user's profile information including ID, email, and creation timestamp.
 */
export const profileHandler = <ThrowOnError extends boolean = false>(options?: Options<ProfileHandlerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProfileHandlerResponses, ProfileHandlerErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zProfileHandlerData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zProfileHandlerResponse.parseAsync(data);
        },
        url: '/api/v1/auth/profile',
        ...options
    });
};

/**
 * Register a new user
 * Creates a new user account with email and password. Password is securely hashed using Argon2.
 */
export const registerHandler = <ThrowOnError extends boolean = false>(options: Options<RegisterHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterHandlerResponses, RegisterHandlerErrors, ThrowOnError>({
        requestValidator: async (data) => {
            return await zRegisterHandlerData.parseAsync(data);
        },
        responseValidator: async (data) => {
            return await zRegisterHandlerResponse.parseAsync(data);
        },
        url: '/api/v1/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};