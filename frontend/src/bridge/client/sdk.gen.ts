// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { LoginHandlerData, LoginHandlerResponses, LoginHandlerErrors, LogoutHandlerData, LogoutHandlerResponses, ProfileHandlerData, ProfileHandlerResponses, ProfileHandlerErrors, RegisterHandlerData, RegisterHandlerResponses, RegisterHandlerErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login user
 * Authenticates a user with email and password, returns a JWT token on success.
 */
export const loginHandler = <ThrowOnError extends boolean = false>(options: Options<LoginHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginHandlerResponses, LoginHandlerErrors, ThrowOnError>({
        url: '/api/v1/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout user
 * Logs out the current user. Since JWT is stateless, this just returns a success message.
 */
export const logoutHandler = <ThrowOnError extends boolean = false>(options?: Options<LogoutHandlerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutHandlerResponses, unknown, ThrowOnError>({
        url: '/api/v1/auth/logout',
        ...options
    });
};

/**
 * Get user profile
 * Retrieves the authenticated user's profile information including ID, email, and creation timestamp.
 */
export const profileHandler = <ThrowOnError extends boolean = false>(options?: Options<ProfileHandlerData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProfileHandlerResponses, ProfileHandlerErrors, ThrowOnError>({
        url: '/api/v1/auth/profile',
        ...options
    });
};

/**
 * Register a new user
 * Creates a new user account with email and password. Password is securely hashed using Argon2.
 */
export const registerHandler = <ThrowOnError extends boolean = false>(options: Options<RegisterHandlerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterHandlerResponses, RegisterHandlerErrors, ThrowOnError>({
        url: '/api/v1/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};