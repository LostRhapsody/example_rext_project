// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zAdminLoginRequest = z.object({
    email: z.string(),
    password: z.string()
});

export const zAdminLoginResponse = z.object({
    admin_id: z.string(),
    email: z.string(),
    token: z.string()
});

export const zAuditLogResponse = z.object({
    error_message: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    id: z.string(),
    ip_address: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    method: z.string(),
    path: z.string(),
    request_body: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    response_body: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    response_time_ms: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    status_code: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    timestamp: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    user_agent: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    user_id: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zAuthUser = z.object({
    user_id: z.string()
});

/**
 * Create role request
 */
export const zCreateRoleRequest = z.object({
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    name: z.string(),
    permissions: z.array(z.string())
});

export const zCreateUserRequest = z.object({
    email: z.string(),
    is_admin: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    password: z.string(),
    role_id: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zDatabasePerformanceResponse = z.object({
    avg_execution_time_ms: z.number(),
    critical_query_count: z.coerce.bigint().gte(BigInt(0)),
    error_rate: z.number(),
    max_execution_time_ms: z.number(),
    p50_execution_time_ms: z.number(),
    p95_execution_time_ms: z.number(),
    p99_execution_time_ms: z.number(),
    queries_per_second: z.number(),
    slow_query_count: z.coerce.bigint().gte(BigInt(0)),
    total_queries: z.coerce.bigint().gte(BigInt(0))
});

export const zDatabaseTableResponse = z.object({
    name: z.string(),
    record_count: z.coerce.bigint().gte(BigInt(0))
});

export const zErrorResponse = z.object({
    message: z.string()
});

export const zHealthResponse = z.object({
    active_users_7_days: z.coerce.bigint().gte(BigInt(0)),
    cpu_count: z.int().gte(0),
    cpu_usage: z.number(),
    database_connections: z.optional(z.union([
        z.int().gte(0),
        z.null()
    ])),
    database_performance: z.optional(z.union([
        z.null(),
        zDatabasePerformanceResponse
    ])),
    database_status: z.string(),
    disk_available: z.string(),
    disk_total: z.string(),
    disk_usage: z.number(),
    disk_used: z.string(),
    environment: z.string(),
    host_name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    kernel_version: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    memory_available: z.string(),
    memory_total: z.string(),
    memory_usage: z.number(),
    memory_used: z.string(),
    network_bytes_received: z.string(),
    network_bytes_sent: z.string(),
    new_users_24_hours: z.coerce.bigint().gte(BigInt(0)),
    new_users_30_days: z.coerce.bigint().gte(BigInt(0)),
    new_users_7_days: z.coerce.bigint().gte(BigInt(0)),
    os_version: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    process_count: z.int().gte(0),
    project_name: z.string(),
    project_version: z.string(),
    server_host: z.string(),
    server_port: z.int().gte(0),
    server_protocol: z.string(),
    status: z.string(),
    system_name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    temperature: z.optional(z.union([
        z.number(),
        z.null()
    ])),
    timestamp: z.string(),
    total_users: z.coerce.bigint().gte(BigInt(0)),
    uptime: z.string()
});

export const zLoginRequest = z.object({
    email: z.string(),
    password: z.string()
});

export const zLoginResponse = z.object({
    token: z.string()
});

export const zLogsQueryParams = z.object({
    end_date: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    limit: z.optional(z.coerce.bigint().gte(BigInt(0))),
    method: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    page: z.optional(z.coerce.bigint().gte(BigInt(0))),
    start_date: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    status_code: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    user_id: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zMessageResponse = z.object({
    message: z.string()
});

export const zPaginationMeta = z.object({
    limit: z.coerce.bigint().gte(BigInt(0)),
    page: z.coerce.bigint().gte(BigInt(0)),
    total: z.coerce.bigint().gte(BigInt(0)),
    total_pages: z.coerce.bigint().gte(BigInt(0))
});

export const zPaginatedResponseAuditLogResponse = z.object({
    data: z.array(z.object({
        error_message: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        id: z.string(),
        ip_address: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        method: z.string(),
        path: z.string(),
        request_body: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        response_body: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        response_time_ms: z.optional(z.union([
            z.int(),
            z.null()
        ])),
        status_code: z.optional(z.union([
            z.int(),
            z.null()
        ])),
        timestamp: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        user_agent: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        user_id: z.optional(z.union([
            z.string(),
            z.null()
        ]))
    })),
    pagination: zPaginationMeta
});

export const zPaginatedResponseRoleResponse = z.object({
    data: z.array(z.object({
        created_at: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        description: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        id: z.int(),
        name: z.string(),
        permissions: z.array(z.string()),
        updated_at: z.optional(z.union([
            z.string(),
            z.null()
        ]))
    })),
    pagination: zPaginationMeta
});

export const zPaginatedResponseUserResponse = z.object({
    data: z.array(z.object({
        created_at: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        email: z.string(),
        id: z.string(),
        is_admin: z.optional(z.union([
            z.boolean(),
            z.null()
        ])),
        role_id: z.optional(z.union([
            z.int(),
            z.null()
        ])),
        role_name: z.optional(z.union([
            z.string(),
            z.null()
        ]))
    })),
    pagination: zPaginationMeta
});

/**
 * Permission check request
 */
export const zPermissionCheckRequest = z.object({
    permission: z.string(),
    user_id: z.string()
});

/**
 * Permission check response
 */
export const zPermissionCheckResponse = z.object({
    has_permission: z.boolean(),
    required_permission: z.string(),
    user_role: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zProfileResponse = z.object({
    created_at: z.optional(z.union([
        z.iso.datetime(),
        z.null()
    ])),
    email: z.string(),
    id: z.string()
});

export const zRegisterRequest = z.object({
    email: z.string(),
    password: z.string()
});

export const zRegisterResponse = z.object({
    createdAt: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    email: z.string(),
    message: z.string(),
    userId: z.string()
});

/**
 * Role response
 */
export const zRoleResponse = z.object({
    created_at: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    id: z.int(),
    name: z.string(),
    permissions: z.array(z.string()),
    updated_at: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zTableRecordResponse = z.object({
    columns: z.array(z.string()),
    records: z.array(z.array(z.unknown()))
});

export const zTableRecordsQueryParams = z.object({
    limit: z.optional(z.coerce.bigint().gte(BigInt(0))),
    page: z.optional(z.coerce.bigint().gte(BigInt(0)))
});

/**
 * Update role request
 */
export const zUpdateRoleRequest = z.object({
    description: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    name: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    permissions: z.optional(z.union([
        z.array(z.string()),
        z.null()
    ]))
});

export const zUpdateUserRequest = z.object({
    email: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    is_admin: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    password: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    role_id: z.optional(z.union([
        z.int(),
        z.null()
    ]))
});

export const zUserResponse = z.object({
    created_at: z.optional(z.union([
        z.string(),
        z.null()
    ])),
    email: z.string(),
    id: z.string(),
    is_admin: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    role_id: z.optional(z.union([
        z.int(),
        z.null()
    ])),
    role_name: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zUsersQueryParams = z.object({
    is_admin: z.optional(z.union([
        z.boolean(),
        z.null()
    ])),
    limit: z.optional(z.coerce.bigint().gte(BigInt(0))),
    page: z.optional(z.coerce.bigint().gte(BigInt(0))),
    search: z.optional(z.union([
        z.string(),
        z.null()
    ]))
});

export const zGetDatabaseTablesHandlerData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Database tables retrieved successfully
 */
export const zGetDatabaseTablesHandlerResponse = z.array(zDatabaseTableResponse);

export const zGetTableRecordsHandlerData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        table_name: z.string()
    }),
    query: z.optional(z.object({
        page: z.optional(z.coerce.bigint().gte(BigInt(0))),
        limit: z.optional(z.coerce.bigint().gte(BigInt(0)))
    }))
});

/**
 * Table records retrieved successfully
 */
export const zGetTableRecordsHandlerResponse = zTableRecordResponse;

export const zHealthHandlerData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * System health check successful
 */
export const zHealthHandlerResponse = zHealthResponse;

export const zAdminLoginHandlerData = z.object({
    body: zAdminLoginRequest,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Admin login successful
 */
export const zAdminLoginHandlerResponse = zAdminLoginResponse;

export const zAdminLogoutHandlerData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Admin logout successful
 */
export const zAdminLogoutHandlerResponse = zMessageResponse;

export const zGetAuditLogsHandlerData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        page: z.optional(z.coerce.bigint().gte(BigInt(0))),
        limit: z.optional(z.coerce.bigint().gte(BigInt(0))),
        method: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        status_code: z.optional(z.union([
            z.int(),
            z.null()
        ])),
        user_id: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        start_date: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        end_date: z.optional(z.union([
            z.string(),
            z.null()
        ]))
    }))
});

/**
 * Audit logs retrieved successfully
 */
export const zGetAuditLogsHandlerResponse = zPaginatedResponseAuditLogResponse;

export const zCheckPermissionHandlerData = z.object({
    body: zPermissionCheckRequest,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Permission check completed
 */
export const zCheckPermissionHandlerResponse = zPermissionCheckResponse;

export const zGetRolesHandlerData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.object({
        page: z.coerce.bigint().gte(BigInt(0)),
        limit: z.coerce.bigint().gte(BigInt(0)),
        search: z.optional(z.union([
            z.string(),
            z.null()
        ]))
    })
});

/**
 * Roles retrieved successfully
 */
export const zGetRolesHandlerResponse = zPaginatedResponseRoleResponse;

export const zCreateRoleHandlerData = z.object({
    body: zCreateRoleRequest,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Role created successfully
 */
export const zCreateRoleHandlerResponse = zRoleResponse;

export const zDeleteRoleHandlerData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.int()
    }),
    query: z.optional(z.never())
});

/**
 * Role deleted successfully
 */
export const zDeleteRoleHandlerResponse = zMessageResponse;

export const zGetRoleHandlerData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.int()
    }),
    query: z.optional(z.never())
});

/**
 * Role retrieved successfully
 */
export const zGetRoleHandlerResponse = zRoleResponse;

export const zUpdateRoleHandlerData = z.object({
    body: zUpdateRoleRequest,
    path: z.object({
        id: z.int()
    }),
    query: z.optional(z.never())
});

/**
 * Role updated successfully
 */
export const zUpdateRoleHandlerResponse = zRoleResponse;

export const zGetUsersHandlerData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.object({
        page: z.optional(z.coerce.bigint().gte(BigInt(0))),
        limit: z.optional(z.coerce.bigint().gte(BigInt(0))),
        search: z.optional(z.union([
            z.string(),
            z.null()
        ])),
        is_admin: z.optional(z.union([
            z.boolean(),
            z.null()
        ]))
    }))
});

/**
 * Users retrieved successfully
 */
export const zGetUsersHandlerResponse = zPaginatedResponseUserResponse;

export const zCreateUserHandlerData = z.object({
    body: zCreateUserRequest,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * User created successfully
 */
export const zCreateUserHandlerResponse = zUserResponse;

export const zDeleteUserHandlerData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * User deleted successfully
 */
export const zDeleteUserHandlerResponse = zMessageResponse;

export const zGetUserHandlerData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * User retrieved successfully
 */
export const zGetUserHandlerResponse = zUserResponse;

export const zUpdateUserHandlerData = z.object({
    body: zUpdateUserRequest,
    path: z.object({
        id: z.string()
    }),
    query: z.optional(z.never())
});

/**
 * User updated successfully
 */
export const zUpdateUserHandlerResponse = zUserResponse;

export const zLoginHandlerData = z.object({
    body: zLoginRequest,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Login successful
 */
export const zLoginHandlerResponse = zLoginResponse;

export const zLogoutHandlerData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Logout successful
 */
export const zLogoutHandlerResponse = zMessageResponse;

export const zProfileHandlerData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * Profile retrieved successfully
 */
export const zProfileHandlerResponse = zProfileResponse;

export const zRegisterHandlerData = z.object({
    body: zRegisterRequest,
    path: z.optional(z.never()),
    query: z.optional(z.never())
});

/**
 * User created successfully
 */
export const zRegisterHandlerResponse = zRegisterResponse;