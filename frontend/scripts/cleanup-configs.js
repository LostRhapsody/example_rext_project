#!/usr/bin/env node

/**
 * Cleanup script to remove old configuration files after consolidation
 * Run this script after implementing the unified configuration approach
 */

import { unlink, access } from 'node:fs/promises'
import { join } from 'node:path'

const filesToRemove = [
  'tsconfig.app.json',
  'tsconfig.node.json',
  'tsconfig.vitest.json',
  'vitest.config.ts',
  '.prettierrc.json',
  '.eslintrc-auto-import.json'
]

const autoGeneratedFiles = [
  'auto-imports.d.ts',
  'components.d.ts'
]

async function fileExists(filePath) {
  try {
    await access(filePath)
    return true
  } catch {
    return false
  }
}

async function cleanupConfigs() {
  console.log('üßπ Cleaning up old configuration files...')

  for (const file of filesToRemove) {
    const filePath = join(process.cwd(), file)
    if (await fileExists(filePath)) {
      try {
        await unlink(filePath)
        console.log(`‚úÖ Removed: ${file}`)
      } catch (error) {
        console.log(`‚ùå Failed to remove ${file}: ${error.message}`)
      }
    } else {
      console.log(`‚ö†Ô∏è  File not found: ${file}`)
    }
  }

  console.log('\nüìù Note: Auto-generated files will be recreated automatically:')
  for (const file of autoGeneratedFiles) {
    console.log(`   - ${file}`)
  }

  console.log('\nüéâ Configuration cleanup complete!')
  console.log('üìã Remaining configuration files:')
  console.log('   - package.json (dependencies and scripts)')
  console.log('   - tsconfig.json (unified TypeScript config)')
  console.log('   - vite.config.ts (unified build config)')
  console.log('   - eslint.config.ts (unified linting config)')
  console.log('   - playwright.config.ts (e2e testing config)')
  console.log('   - config/unified.config.ts (data-driven config store)')
}

cleanupConfigs().catch(console.error)